#!/bin/bash
set -e

export PATH="/usr/lib/llvm-3.5/bin:$PATH"
export HOMEDIR=/home/healem/bbb
OPTS=""
TARGET=""

prep()
{
  TARGETDIR=$HOMEDIR/builds/$COMPILER-$ARCH-bbb

  if [ ! -d $TARGETDIR ]
  then
    mkdir -p $TARGETDIR
  fi
}

compile()
{
  prep

  if [ "$COMPILER" == "clang" ]
  then
    #OPTS="-DCMAKE_USER_MAKE_RULES_OVERRIDE=$HOMEDIR/$COMPILER-$ARCH-overrides.txt"
    OPTS="-DCMAKE_USER_MAKE_RULES_OVERRIDE=$HOMEDIR/$COMPILER-overrides.txt"
    #OPTS=""
  fi

  # build bbb
  cd $TARGETDIR
  cmake -DCMAKE_TOOLCHAIN_FILE=$HOMEDIR/$COMPILER-$ARCH-toolchain.cmake -DCMAKE_INSTALL_PREFIX=$TARGETDIR/pkg $OPTS $HOMEDIR
  make
  make install
}

analyze()
{
  prep

  cd $TARGETDIR
  cmake -DCMAKE_TOOLCHAIN_FILE=$HOMEDIR/$COMPILER-$ARCH-toolchain.cmake -DCMAKE_INSTALL_PREFIX=$TARGETDIR/pkg $OPTS $HOMEDIR
  /usr/bin/scan-build-3.5 make "$@"
  make install
}

clean()
{
  rm -rf $HOMEDIR/builds/*
  exit 0
}  

while [[ $# > 0 ]]
do
  key="$1"

  case $key in
    clang)
    echo "using clang"
    COMPILER="$key"
    ;;
    gnu)
    echo "using gnu"
    COMPILER="$key"
    ;;
    arm)
    echo "targeting arm"
    ARCH="$key"
    ;;
    intel)
    echo "targeting intel"
    ARCH="$key"
    ;;
    analyze)
    echo "running static analyzer"
    ARCH="intel"
    COMPILER="clang-analyzer"
    TARGET="analyze"
    ;;
    clean)
    echo "cleaning all builds"
    clean
    ;;
    *)
    echo "Unknown option, using defaults"
    COMPILER="gnu"
    ARCH="arm"
    ;;
  esac
  shift
done

if [ "$TARGET" == "" ]
then
  compile
else
  $TARGET
fi

# build inih
#cd /home/healem/inih
#cmake -DCMAKE_TOOLCHAIN_FILE=$HOMEDIR/$COMPILER-$ARCH-toolchain.cmake $OPTS
#make
#cp lib/*.so $LIBDIR

# build bbb

